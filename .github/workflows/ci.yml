on: [push]
name: CI
jobs:

  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - id: component
        name: Search for latest nightly clippy
        uses: actions-rs/components-nightly@v1
        with:
          target: x86_64-unknown-linux-gnu
          component: clippy

      - name: Install nightly toolchain with clippy available
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.component.outputs.toolchain }}
          override: true

      - name: Install nightly rustfmt
        run: rustup component add rustfmt --toolchain ${{ steps.component.outputs.toolchain }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: fmt
          args: --all -- --check

      - name: Install nightly clippy
        run: rustup component add clippy --toolchain ${{ steps.component.outputs.toolchain }}

      - name: Run clippy
        run: cargo clippy --message-format json > clippy.json
        continue-on-error: true

      - name: Publish clippy lints
        uses: digirati-labs/analysis-publisher@master
        with:
          args: --report-type=cargo --path=**/clippy.json --publisher=github_check"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  documentation:
    name: Generate documentation site
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - run: cd documentation; yarn install && yarn run build

      - run: npx netlify-cli deploy -s $NETLIFY_SITE_ID -t $NETLIFY_TOKEN -p ./documentation/build/secsp
        env:
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: $${ secrets.NETLIFY_SITE_ID }}

  coverage:
    name: Generate coverage report
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo-tarpaulin
        uses: garyttierney/tarpaulin@feat/draft-version

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml

  fuzz:
    name: Parser fuzzing
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install afl.rs
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: afl --force

      - name: Build with afl.rs instrumentation
        uses: actions-rs/cargo@v1
        with:
          command: afl
          args: build --manifest-path=packages/secsp-fuzzer/Cargo.toml
        env:
          RUSTFLAGS: '-Clink-arg=-fuse-ld=gold'

      - name: Disable coredumps
        run: sudo sh -c 'echo core >/proc/sys/kernel/core_pattern'

      - name: Run afl.rs
        run: timeout 5m cargo afl fuzz -i documentation/examples -o fuzzer-output/ -- packages/secsp-fuzzer/target/debug/secsp-fuzzer
        continue-on-error: true

      - name: Create fuzzing results tarball
        run: tar cvf fuzzer-output.tar.gz fuzzer-output/

      - name: Archive fuzzing results
        uses: actions/upload-artifact@v1
        with:
          name: fuzzer-report
          path: fuzzer-output.tar.gz

  benchmark:
    name: Parser and analysis benchmarking
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: -- --save-baseline benchmark-baseline
