steps:
  - powershell: Invoke-WebRequest -Uri https://win.rustup.rs/ -OutFile rustup-init.exe
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup [Windows]
  - script: |
      rustup-init.exe -y --default-host %TARGET% --default-toolchain %CHANNEL%
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install toolchain [Windows]
  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host $TARGET --default-toolchain $CHANNEL
      export PATH=$PATH:~/.cargo/bin
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup and toolchain [Linux & OSX]
  - script: |
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions
  - script: |
      cargo install cargo2junit
    displayName: Install cargo2junit
  - script: |
      cargo build
    displayName: build
  - script: |
      cargo test --all -- -Z unstable-options --format json > test_results.json
      type test_results.json
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Cargo test [Windows]
  - script: |
      cargo test --all -- -Z unstable-options --format json | tee test_results.json
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: Cargo test [Linux & OSX]
  - script: |
      type test_results.json | cargo2junit > test_results_lkg.xml
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Convert Cargo test results to junit XML [Windows]
  - script: |
      cat test_results.json | cargo2junit > test_results_lkg.xml
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: Convert Cargo test results to junit XML [Linux & OSX]
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_lkg.xml'
      testRunTitle: $(System.JobDisplayName)
      buildPlatform: $(System.JobDisplayName)
    condition: succeededOrFailed()
  - script: |
      cargo bench -- --save-baseline benchmark-baseline
    condition: succeeded()
    continueOnError: true
    displayName: 'Cargo bench'
  - task: CopyFiles@2
    displayName: 'Copy Debug binaries [Windows]'
    inputs:
      Contents: |
        target\debug\secspc.exe
        target\debug\secsp-language-server.exe
        benchmark-baseline
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
  - task: CopyFiles@2
    displayName: 'Copy Debug binaries [Linux & OSX]'
    inputs:
      Contents: |
        target/debug/secspc
        target/debug/secsp-language-server
        benchmark-baseline
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: 'secsp-debug-binaries-$(HOST_IMAGE)'
